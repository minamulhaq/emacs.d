

* General Programming Mode Tweeks

** Tabs
#+begin_src emacs-lisp

(add-hook 'prog-mode-hook 'enable-tabs)

(add-hook 'lisp-mode-hook 'disable-tabs)
(add-hook 'emacs-lisp-mode-hook 'disable-tabs)
#+end_src



* C/C++ 

#+begin_src emacs-lisp
(use-package lsp-mode
		       :commands (lsp lsp-deffered)
		       :init
		       (setq lsp-keymap-prefix "C-c l")
		       :config 
		       (lsp-enable-which-key-integration t)
		       :hook (sh-mode . lsp))

           (setq package-selected-packages '(lsp-mode yasnippet lsp-treemacs helm-lsp
                                             projectile hydra flycheck company avy which-key helm-xref dap-mode))

                                             (when (cl-find-if-not #'package-installed-p package-selected-packages)
                                             (package-refresh-contents)
                                             (mapc #'package-install package-selected-packages))

(with-eval-after-load 'lsp-mode
                      (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration)
                      (require 'dap-cpptools)
                      (yas-global-mode))
  (add-hook 'c-mode-hook 'lsp)
  (add-hook 'c++-mode-hook 'lsp)
  


(setq gc-cons-threshold (* 100 1024 1024)
      read-process-output-max (* 1024 1024)
      treemacs-space-between-root-nodes nil
      company-idle-delay 0.0
      company-minimum-prefix-length 1
      lsp-idle-delay 0.1)  ;; clangd is fast

(use-package flycheck
             :ensure t
             :init (global-flycheck-mode))

(setq lsp-ui-sideline-show-diagnostics 0)
;(setq lsp-ui-sideline-show-hover 1)
(setq lsp-ui-sideline-show-code-actions 1)
(setq lsp-ui-sideline-update-mode 1)
(setq lsp-ui-sideline-delay 0)
(setq lsp-ui-peek-enable 1)
(setq sp-ui-peek-jump-backward 1)
(setq lsp-ui-peek-jump-forward 1)

(setq c-recognize-knr-p nil)

(add-to-list 'auto-mode-alist '("\\.tpp\\'" . c++-mode))

(add-hook 'c-mode-hook (lambda () (setq c-basic-offset 4)))
(add-hook 'c++-mode-hook (lambda () (setq c-basic-offset 4)))
(add-hook 'c++-mode-hook (lambda () (highlight-lines-matching-regexp ".\{91\}" "hi-green-b")))




(add-hook 'c-mode-hook
          (lambda ()
            (setq-default indent-tabs-mode t)))

(add-hook 'c++-mode-hook
          (lambda ()
            (setq-default indent-tabs-mode t)))

(add-hook 'c-mode-hook (lambda () (show-paren-mode 1)))
(add-hook 'cc-mode-hook (lambda () (show-paren-mode 1)))
(add-hook 'c++-mode-hook (lambda () (show-paren-mode 1)))

(add-hook 'c-mode-hook 'projectile-mode)
(add-hook 'cc-mode-hook 'projectile-mode)
(add-hook 'c++-mode-hook 'projectile-mode)

(defun disable-tabs () (setq indent-tabs-mode nil))
(defun enable-tabs  ()
(local-set-key (kbd "TAB") 'tab-to-tab-stop)
(setq indent-tabs-mode t)
(setq tab-width 4))
(setq-default electric-indent-inhibit t)

(add-hook 'c-mode-hook
	       (lambda ()
		     (setq c-default-style "gnu")
		     ))

 (add-hook 'c++-mode-hook
	       (lambda ()
		     (setq c-default-style "gnu")
		     ))

(use-package elpy
:ensure t
:defer t
:init
(advice-add 'python-mode :before 'elpy-enable)
(setq elpy-rpc-python-command "python3")
(setq python-shell-interpreter "python3"
    python-shell-interpreter-args "-i"))

(use-package lsp-jedi
:ensure t)
(add-hook 'python-mode-hook 'jedi:setup)
(setq jedi:complete-on-dot t)

#+end_src
