

* General Programming Mode Tweeks

** Tabs
#+begin_src emacs-lisp

(add-hook 'prog-mode-hook 'enable-tabs)

(add-hook 'lisp-mode-hook 'disable-tabs)
(add-hook 'emacs-lisp-mode-hook 'disable-tabs)
#+end_src




* C/C++ 


** LSP MODE

#+begin_src emacs-lisp
(use-package lsp-mode
		       :commands (lsp lsp-deffered)
		       :init
		       (setq lsp-keymap-prefix "C-c l")
		       :config 
		       (lsp-enable-which-key-integration t)
		       :hook (sh-mode . lsp))

           (setq package-selected-packages '(lsp-mode yasnippet lsp-treemacs helm-lsp
                                             projectile hydra flycheck company avy which-key helm-xref dap-mode))

                                             (when (cl-find-if-not #'package-installed-p package-selected-packages)
                                             (package-refresh-contents)
                                             (mapc #'package-install package-selected-packages))

(with-eval-after-load 'lsp-mode
                      (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration)
                      (require 'dap-cpptools)
                      (yas-global-mode))
  (add-hook 'c-mode-hook 'lsp)
  (add-hook 'c++-mode-hook 'lsp)
  #+end_src


#+begin_src emacs-lisp
  

(setq gc-cons-threshold (* 100 1024 1024)
      read-process-output-max (* 1024 1024)
      treemacs-space-between-root-nodes nil
      company-idle-delay 0.0
      company-minimum-prefix-length 1
      lsp-idle-delay 0.1)  ;; clangd is fast
#+end_src
      
** FlyCheck

#+begin_src emacs-lisp
(use-package flycheck
             :ensure t
             :init (global-flycheck-mode))
#+end_src
** LSP UI

#+begin_src emacs-lisp
(setq lsp-ui-sideline-show-diagnostics 0)
;(setq lsp-ui-sideline-show-hover 1)
(setq lsp-ui-sideline-show-code-actions 1)
(setq lsp-ui-sideline-update-mode 1)
(setq lsp-ui-sideline-delay 0)
(setq lsp-ui-peek-enable 1)
(setq sp-ui-peek-jump-backward 1)
(setq lsp-ui-peek-jump-forward 1)

#+end_src



** Detect Old Patterns
#+begin_src emacs-lisp

(setq c-recognize-knr-p nil)
#+end_src



** Add custom files to ELISP

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.tpp\\'" . c++-mode))
#+end_src



** Basic Offsets

#+begin_src emacs-lisp

(add-hook 'c-mode-hook (lambda () (setq c-basic-offset 4)))
(add-hook 'c++-mode-hook (lambda () (setq c-basic-offset 4)))
(add-hook 'c++-mode-hook (lambda () (highlight-lines-matching-regexp ".\{91\}" "hi-green-b")))
#+end_src




** Indentation

#+begin_src emacs-lisp


(defun disable-tabs () (setq indent-tabs-mode nil))
(defun enable-tabs  ()
(local-set-key (kbd "TAB") 'tab-to-tab-stop)
(setq indent-tabs-mode t)
(setq tab-width 4))
(setq-default electric-indent-inhibit t)

(add-hook 'c-mode-hook
          (lambda ()
            (setq-default indent-tabs-mode t)))

(add-hook 'c++-mode-hook
          (lambda ()
            (setq-default indent-tabs-mode t)))
#+end_src

** Paren-Mode

#+begin_src emacs-lisp

(add-hook 'c-mode-hook (lambda () (show-paren-mode 1)))
(add-hook 'cc-mode-hook (lambda () (show-paren-mode 1)))
(add-hook 'c++-mode-hook (lambda () (show-paren-mode 1)))
#+end_src

** Enable Projectile Mode

#+begin_src emacs-lisp

(add-hook 'c-mode-hook 'projectile-mode)
(add-hook 'cc-mode-hook 'projectile-mode)
(add-hook 'c++-mode-hook 'projectile-mode)

#+end_src

** Default Coding Style

#+begin_src emacs-lisp


(add-hook 'c-mode-hook
	       (lambda ()
		     (setq c-default-style "gnu")
		     ))

 (add-hook 'c++-mode-hook
	       (lambda ()
		     (setq c-default-style "gnu")
		     ))
 #+end_src

 

* Python
** Elpy

 #+begin_src emacs-lisp
(use-package elpy
:ensure t
:defer t
:init
(advice-add 'python-mode :before 'elpy-enable)
(setq elpy-rpc-python-command "python3")
(setq python-shell-interpreter "python3"
    python-shell-interpreter-args "-i"))
#+end_src
    
** LSP-Jedi
#+begin_src emacs-lisp

(use-package lsp-jedi
:ensure t)
(add-hook 'python-mode-hook 'jedi:setup)
(setq jedi:complete-on-dot t)

#+end_src



* Assembly 

  #+begin_src emacs-lisp
  (defun my-asm-mode-hook ()
  ;; you can use `comment-dwim' (M-;) for this kind of behaviour anyway
  (local-unset-key (vector asm-comment-char))
  ;; (local-unset-key "<return>") ; doesn't work. "RET" in a terminal.  http://emacs.stackexchange.com/questions/13286/how-can-i-stop-the-enter-key-from-triggering-a-completion-in-company-mode
  (electric-indent-local-mode)  ; toggle off
;  (setq tab-width 4)
  (setq indent-tabs-mode nil)
  ;; asm-mode sets it locally to nil, to "stay closer to the old TAB behaviour".
  ;; (setq tab-always-indent (default-value 'tab-always-indent))

  (defun asm-calculate-indentation ()
  (or
   ;; Flush labels to the left margin.
;   (and (looking-at "\\(\\.\\|\\sw\\|\\s_\\)+:") 0)
   (and (looking-at "[.@_[:word:]]+:") 0)
   ;; Same thing for `;;;' comments.
   (and (looking-at "\\s<\\s<\\s<") 0)
   ;; %if nasm macro stuff goes to the left margin
   (and (looking-at "%") 0)
   (and (looking-at "c?global\\|section\\|default\\|align\\|INIT_..X") 0)
   ;; Simple `;' comments go to the comment-column
   ;(and (looking-at "\\s<\\(\\S<\\|\\'\\)") comment-column)
   ;; The rest goes at column 4
   (or 4)))
  )

(add-hook 'asm-mode-hook #'my-asm-mode-hook)
  
  #+end_src

  

