
* Evil
** Download Evil
  #+begin_src emacs-lisp
  (unless (package-installed-p 'evil)
    (package-install 'evil))

  #+end_src

** Evil Leader

   #+begin_src emacs-lisp
   (use-package evil-leader
      :ensure t
      :commands (evil-leader-mode)
      :init
      (setq evil-want-keybinding nil)
      (global-evil-leader-mode)
      :config
      (progn
		(evil-leader/set-leader ",")
		(define-key evil-normal-state-map (kbd "C-h") 'evil-window-left)
		(define-key evil-normal-state-map (kbd "C-j") 'evil-window-down)
		(define-key evil-normal-state-map (kbd "C-k") 'evil-window-up)
		(define-key evil-normal-state-map (kbd "C-l") 'evil-window-right)

		(evil-leader/set-key
          "s" 'save-buffer
          "k" 'kill-buffer-and-window
          "h" 'dired-jump
          "v" 'split-window-right
          "f" 'find-file
          "e" 'pp-eval-last-sexp
          "," 'other-window
          "b" 'ibuffer
          "x" 'helm-M-x
          "p" 'helm-projectile
          "g" 'magit-status
        )
        )
      )
   
   #+end_src


** Set Evil-Emacs-State
   #+begin_src emacs-lisp
   (defun inam/evil-hook ()
   (dolist (mode '(custom-mode
                  eshell-mode
                  git-rebase-mode
                  erc-mode
                  circe-server-mode
                  circe-chat-mode
                  circe-query-mode
                  sauron-mode
                  term-mode))
  (add-to-list 'evil-emacs-state-modes mode)))
   
   #+end_src


** Enable Evil
   #+begin_src emacs-lisp
   (use-package evil
   :ensure t
   :after evil-leader
   :init
   (setq evil-want-C-u-scroll t)
   (setq evil-move-beyond-eol t)
   (setq evil-cross-lines t)
   (setq evil-undo-system 'undo-tree)
   (setq evil-respect-visual-line-mode t)
   (global-undo-tree-mode)
   (evil-mode 1)
   :config
   (progn
    (add-hook 'evil-mode-hook 'inam/evil-hook)
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal)
    (when evil-want-C-u-scroll
      (define-key evil-insert-state-map (kbd "C-u") 'evil-scroll-up)
      (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
      (define-key evil-visual-state-map (kbd "C-u") 'evil-scroll-up)
      (define-key evil-motion-state-map (kbd "C-u") 'evil-scroll-up)
	;  (define-key evil-insert-state-map (kbd-"TAB") 'tab-to-tab-stop)
    )
  ))
   
   #+end_src


** Evil Collection

   #+begin_src emacs-lisp
   (use-package evil-collection
			 :after evil
			 :config
			 (evil-collection-init))
   
   #+end_src

   
** Undo Tree
   #+begin_src emacs-lisp
(use-package undo-tree
  :init
  :after evil
  
  (global-undo-tree-mode)
  )
   
   #+end_src

   
** Evil Nerd Commenter  
   #+begin_src emacs-lisp
     (use-package evil-nerd-commenter        
        :bind ("M-/" . evilnc-comment-or-uncomment-lines))
   
   #+end_src

* Load Gruvbox theme

 #+BEGIN_SRC emacs-lisp

(load-theme 'gruvbox t)

 #+END_SRC

* Electric Pair Mode

  #+begin_src emacs-lisp
  (electric-pair-mode t)
  (show-paren-mode 1)
  (setq electric-pair-preserve-balance nil)
  #+end_src

** Rainbow Delimeters
   #+begin_src emacs-lisp
   (use-package rainbow-delimeters
 			 :hook ( prog-mode . rainbow-delimiters-mode))
   #+end_src


* Start Up Tweeks
Clear Startup Screen Messages

#+begin_src emacs-lisp

(setq inhibit-splash-screen t)
(setq inhibit-startup-message t)
(setq initial-scratch-message nil)
#+end_src




* User Details
User Name

#+begin_src emacs-lisp
(setq user-full-name "Muhammad Inam Ul Haq")
#+end_src



* General tweeks
** Escape Key
esc cancels everything.
#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

#+begin_src emacs-lisp
;(tool-bar-mode -2)
; (menu-bar-mode -1)
(scroll-bar-mode -1)
(blink-cursor-mode -1)
#+end_src



** Line Numbers
   #+begin_src emacs-lisp
(setq-default
 display-line-numbers-type 'relative
 display-line-numbers-current-absolute t
 display-line-numbers-widen t)
(global-display-line-numbers-mode t)
(column-number-mode 1)
   #+end_src

** Disable line numbers for some modes 
   #+begin_src emacs-lisp
   (dolist (mode '(org-mode-hook
				 term-mode-hook
				 shell-mode-hook
				 eshell-mode-hook))
  (add-hook mode (lambda() (display-line-numbers-mode 0))))
   #+end_src




** No Ring Bells

   #+begin_src emacs-lisp
   (setq ring-bell-function 'ignore)
   #+end_src




** Set Encodings
   #+begin_src emacs-lisp
   (setq locale-coding-system 'utf-8)
   (set-terminal-coding-system 'utf-8)
   (set-keyboard-coding-system 'utf-8)
   (set-selection-coding-system 'utf-8)
   (prefer-coding-system 'utf-8)
   
   #+end_src
   

** Revert Buffer and Killing buffers
   #+begin_src emacs-lisp
   ;; (fset 'yes-or-no-p 'y-or-n-p)
   ;; (set-variable 'confirm-kill-emacs 'yes-or-no-p)
   (global-set-key (kbd "<f5>") 'revert-buffer)
   

   #+end_src

   

* DOOM Mode Line

  #+begin_src emacs-lisp
  
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))


(use-package mode-icons
  :ensure t
  :init (mode-icons-mode)
  :config
  (progn
    (setq doom-modeline-height 10)
    (setq doom-modeline-project-detection 'projectile)
    (setq doom-modeline-buffer-file-name-style 'file-name)
    (setq doom-modeline-icon (display-graphic-p))
    (setq doom-modeline-major-mode-icon t)
    (setq doom-modeline-major-mode-color-icon t)
    (setq doom-modeline-buffer-state-icon t)
    (setq doom-modeline-buffer-modification-icon t)
    (setq doom-modeline-indent-info nil)
    (setq doom-modeline-modal-icon 'evil)
    (setq doom-modeline-env-version t)
    )
)
  #+end_src


* Hydra

* General

  #+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup t)

  (general-create-definer dw/leader-key-def
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")

  (general-create-definer dw/ctrl-c-keys
    :prefix "C-c")
  )
   (dw/leader-key-def 			;
   "z" '(hydra-text-scale/body :which-key "scale-text")
   "s" '(shell)
   )
  #+end_src
  
* Slime Nav

  #+begin_src emacs-lisp
  (require 'elisp-slime-nav)
  (defun my-lisp-hook ()
  (elisp-slime-nav-mode)
  (turn-on-eldoc-mode)
    )
  (add-hook 'emacs-lisp-mode-hook 'my-lisp-hook)

  
  #+end_src>
  



  


  

  

  

* Helm

  #+begin_src emacs-lisp
(require 'helm-xref)
(setq xref-show-xrefs-function 'helm-xref-show-xrefs)

(require 'helm)
(require 'helm-config)
(require 'helm-grep)
(helm-projectile-on)

(define-key global-map [remap find-file] #'helm-find-files)
(define-key global-map [remap execute-extended-command] #'helm-M-x)
(define-key global-map [remap switch-to-buffer] #'helm-mini)
  
  #+end_src
  

* Projectile

  #+begin_src emacs-lisp
;; TO DO ;; Configure projectile with Evil

(use-package projectile
  :ensure t
  ;;:delight '(:eval (concat " " (projectile-project-name)))
  :diminish
  :config
  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "C-c p") #'projectile-command-map)
  (define-key projectile-mode-map (kbd "s-p") #'projectile-find-file) ; counsel
  (define-key projectile-mode-map (kbd "s-F") #'projectile-ripgrep) ; counsel
  (setq projectile-sort-order 'recentf
        projectile-indexing-method 'hybrid
		;projectile-completion-system 'helm)
        projectile-completion-system 'ivy))

  
  #+end_src
  

* Pretty Mode
Enable Pretty Mode. Converts lambda to actual symbols (Package CL is deprecated)
  #+begin_src emacs-lisp
;; (use-package pretty-mode
;; 			 :ensure t
;; 			 :config
;; 			 (global-pretty-mode t))
  
  #+end_src

  
* Recent Files
  #+begin_src emacs-lisp
(use-package recentf
  :ensure t
  :config
    (progn
       (recentf-mode 1)
       (setq recentf-max-menu-items 25)
       (global-set-key "\C-x\ \C-r" 'recentf-open-files)))
  
  #+end_src



* Which Key

#+begin_src emacs-lisp
  (use-package which-key
        :ensure t
        :config
        (which-key-mode))
  
#+end_src



  



* General Programming Mode Tweeks

** Tabs
#+begin_src emacs-lisp

(add-hook 'prog-mode-hook 'enable-tabs)

(add-hook 'lisp-mode-hook 'disable-tabs)
(add-hook 'emacs-lisp-mode-hook 'disable-tabs)
#+end_src




* C/C++ 


** LSP MODE

#+begin_src emacs-lisp
(use-package lsp-mode
		       :commands (lsp lsp-deffered)
		       :init
		       (setq lsp-keymap-prefix "C-c l")
		       :config 
		       (lsp-enable-which-key-integration t)
		       :hook (sh-mode . lsp))

           (setq package-selected-packages '(lsp-mode yasnippet lsp-treemacs helm-lsp
                                             projectile hydra flycheck company avy which-key helm-xref dap-mode))

                                             (when (cl-find-if-not #'package-installed-p package-selected-packages)
                                             (package-refresh-contents)
                                             (mapc #'package-install package-selected-packages))

(with-eval-after-load 'lsp-mode
                      (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration)
                      (require 'dap-cpptools)
                      (yas-global-mode))
  (add-hook 'c-mode-hook 'lsp)
  (add-hook 'c++-mode-hook 'lsp)
  #+end_src


#+begin_src emacs-lisp
  

(setq gc-cons-threshold (* 100 1024 1024)
      read-process-output-max (* 1024 1024)
      treemacs-space-between-root-nodes nil
      company-idle-delay 0.0
      company-minimum-prefix-length 1
      lsp-idle-delay 0.1)  ;; clangd is fast
#+end_src
      
** FlyCheck

#+begin_src emacs-lisp
(use-package flycheck
             :ensure t
             :init (global-flycheck-mode))
#+end_src
** LSP UI

#+begin_src emacs-lisp
(setq lsp-ui-sideline-show-diagnostics 0)
;(setq lsp-ui-sideline-show-hover 1)
(setq lsp-ui-sideline-show-code-actions 1)
(setq lsp-ui-sideline-update-mode 1)
(setq lsp-ui-sideline-delay 0)
(setq lsp-ui-peek-enable 1)
(setq sp-ui-peek-jump-backward 1)
(setq lsp-ui-peek-jump-forward 1)

#+end_src



** Detect Old Patterns
#+begin_src emacs-lisp

(setq c-recognize-knr-p nil)
#+end_src



** Add custom files to ELISP

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.tpp\\'" . c++-mode))
#+end_src



** Basic Offsets

#+begin_src emacs-lisp

(add-hook 'c-mode-hook (lambda () (setq c-basic-offset 4)))
(add-hook 'c++-mode-hook (lambda () (setq c-basic-offset 4)))
(add-hook 'c++-mode-hook (lambda () (highlight-lines-matching-regexp ".\{91\}" "hi-green-b")))
#+end_src




** Indentation

#+begin_src emacs-lisp


(defun disable-tabs () (setq indent-tabs-mode nil))
(defun enable-tabs  ()
(local-set-key (kbd "TAB") 'tab-to-tab-stop)
(setq indent-tabs-mode t)
(setq tab-width 4))
(setq-default electric-indent-inhibit t)

(add-hook 'c-mode-hook
          (lambda ()
            (setq-default indent-tabs-mode t)))

(add-hook 'c++-mode-hook
          (lambda ()
            (setq-default indent-tabs-mode t)))
#+end_src

** Paren-Mode

#+begin_src emacs-lisp

(add-hook 'c-mode-hook (lambda () (show-paren-mode 1)))
(add-hook 'cc-mode-hook (lambda () (show-paren-mode 1)))
(add-hook 'c++-mode-hook (lambda () (show-paren-mode 1)))
#+end_src

** Enable Projectile Mode

#+begin_src emacs-lisp

(add-hook 'c-mode-hook 'projectile-mode)
(add-hook 'cc-mode-hook 'projectile-mode)
(add-hook 'c++-mode-hook 'projectile-mode)

#+end_src

** Default Coding Style

#+begin_src emacs-lisp


(add-hook 'c-mode-hook
	       (lambda ()
		     (setq c-default-style "gnu")
		     ))

 (add-hook 'c++-mode-hook
	       (lambda ()
		     (setq c-default-style "gnu")
		     ))
 #+end_src

 

* Python
** Elpy

 #+begin_src emacs-lisp
(use-package elpy
:ensure t
:defer t
:init
(advice-add 'python-mode :before 'elpy-enable)
(setq elpy-rpc-python-command "python3")
(setq python-shell-interpreter "python3"
    python-shell-interpreter-args "-i"))
#+end_src
    
** LSP-Jedi
#+begin_src emacs-lisp

(use-package lsp-jedi
:ensure t)
(add-hook 'python-mode-hook 'jedi:setup)
(setq jedi:complete-on-dot t)

#+end_src



* Assembly 

  #+begin_src emacs-lisp
  (defun my-asm-mode-hook ()
  ;; you can use `comment-dwim' (M-;) for this kind of behaviour anyway
  (local-unset-key (vector asm-comment-char))
  ;; (local-unset-key "<return>") ; doesn't work. "RET" in a terminal.  http://emacs.stackexchange.com/questions/13286/how-can-i-stop-the-enter-key-from-triggering-a-completion-in-company-mode
  (electric-indent-local-mode)  ; toggle off
;  (setq tab-width 4)
  (setq indent-tabs-mode nil)
  ;; asm-mode sets it locally to nil, to "stay closer to the old TAB behaviour".
  ;; (setq tab-always-indent (default-value 'tab-always-indent))

  (defun asm-calculate-indentation ()
  (or
   ;; Flush labels to the left margin.
;   (and (looking-at "\\(\\.\\|\\sw\\|\\s_\\)+:") 0)
   (and (looking-at "[.@_[:word:]]+:") 0)
   ;; Same thing for `;;;' comments.
   (and (looking-at "\\s<\\s<\\s<") 0)
   ;; %if nasm macro stuff goes to the left margin
   (and (looking-at "%") 0)
   (and (looking-at "c?global\\|section\\|default\\|align\\|INIT_..X") 0)
   ;; Simple `;' comments go to the comment-column
   ;(and (looking-at "\\s<\\(\\S<\\|\\'\\)") comment-column)
   ;; The rest goes at column 4
   (or 4)))
  )

(add-hook 'asm-mode-hook #'my-asm-mode-hook)
  
  #+end_src

  

  
* Org 

  #+begin_src emacs-lisp
    (require 'org-tempo)                    
    (add-to-list 'org-structure-template-alist
                              '("el" . "src emacs-lisp"))


    (use-package org-bullets
      :ensure t
      :hook ((org-mode . org-bullets-mode)
             (org-mode . flyspell-mode)
             (org-mode . linum-mode)
             (org-mode . show-paren-mode))
      :config
      (progn

    ;;; add autocompletion
    (defun org-easy-template--completion-table (str pred action)
      (pcase action
             (`nil (try-completion  str org-structure-template-alist pred))
             (`t   (all-completions str org-structure-template-alist pred))))

    (defun org-easy-template--annotation-function (s)
      (format " -> %s" (cadr (assoc s org-structure-template-alist))))

    (defun org-easy-template-completion-function ()
      (when (looking-back "^[ \t]*<\\([^ \t]*\\)" (point-at-bol))
        (list
          (match-beginning 1) (point)
          'org-easy-template--completion-table
          :annotation-function 'org-easy-template--annotation-function
          :exclusive 'no)))

    (defun add-easy-templates-to-capf ()
      (add-hook 'completion-at-point-functions
                'org-easy-template-completion-function nil t))

    (add-hook 'org-mode-hook #'add-easy-templates-to-capf)
    ;; configure the calendar

    (setq calendar-week-start-day 1)
    (setq calendar-intermonth-text
          '(propertize
             (format "%2d"
                     (car
                       (calendar-iso-from-absolute
                         (calendar-absolute-from-gregorian (list month day year)))))
             'font-lock-face 'font-lock-warning-face))


    (setq calendar-intermonth-header
          (propertize "Wk"                  ; or e.g. "KW" in Germany
                      'font-lock-face 'font-lock-keyword-face))))
  
  #+end_src
