* Evil
  

** Download Evil
  #+begin_src emacs-lisp
  
  (unless (package-installed-p 'evil)
    (package-install 'evil))

  #+end_src

** Evil Leader

   #+begin_src emacs-lisp
   (use-package evil-leader
      :ensure t
      :commands (evil-leader-mode)
      :init
      (setq evil-want-keybinding nil)
      (global-evil-leader-mode)
      :config
      (progn
		(evil-leader/set-leader ",")
		(define-key evil-normal-state-map (kbd "C-h") 'evil-window-left)
		(define-key evil-normal-state-map (kbd "C-j") 'evil-window-down)
		(define-key evil-normal-state-map (kbd "C-k") 'evil-window-up)
		(define-key evil-normal-state-map (kbd "C-l") 'evil-window-right)

		(evil-leader/set-key
          "s" 'save-buffer
          "k" 'kill-buffer-and-window
          "h" 'dired-jump
          "v" 'split-window-right
          "f" 'find-file
          "e" 'pp-eval-last-sexp
          "," 'other-window
          "b" 'ibuffer
          "x" 'helm-M-x
          "p" 'helm-projectile
          "g" 'magit-status
        )
        )
      )
   
   #+end_src


** Set Evil-Emacs-State
   #+begin_src emacs-lisp
   (defun inam/evil-hook ()
   (dolist (mode '(custom-mode
                  eshell-mode
                  git-rebase-mode
                  erc-mode
                  circe-server-mode
                  circe-chat-mode
                  circe-query-mode
                  sauron-mode
                  term-mode))
  (add-to-list 'evil-emacs-state-modes mode)))
   
   #+end_src


** Enable Evil
   #+begin_src emacs-lisp
   (use-package evil
   :ensure t
   :after evil-leader
   :init
   (setq evil-want-C-u-scroll t)
   (setq evil-move-beyond-eol t)
   (setq evil-cross-lines t)
   (setq evil-undo-system 'undo-tree)
   (setq evil-respect-visual-line-mode t)
   (global-undo-tree-mode)
   (evil-mode 1)
   :config
   (progn
    (add-hook 'evil-mode-hook 'inam/evil-hook)
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal)
    (when evil-want-C-u-scroll
      (define-key evil-insert-state-map (kbd "C-u") 'evil-scroll-up)
      (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
      (define-key evil-visual-state-map (kbd "C-u") 'evil-scroll-up)
      (define-key evil-motion-state-map (kbd "C-u") 'evil-scroll-up)
	;  (define-key evil-insert-state-map (kbd-"TAB") 'tab-to-tab-stop)
    )
  ))
   
   #+end_src


** Evil Collection

   #+begin_src emacs-lisp
   (use-package evil-collection
			 :after evil
			 :config
			 (evil-collection-init))
   
   #+end_src

   
** Undo Tree
   #+begin_src emacs-lisp
(use-package undo-tree
  :init
  :after evil
  
  (global-undo-tree-mode)
  )
   
   #+end_src

   
